{"name": "test_add_item_to_cart", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 20s, while waiting for:\nbrowser.element(('css selector', '.product-page__order-buttons [aria-label=\"Добавить в корзину\"]')).click\n\nReason: ElementNotInteractableException: element not interactable\n  (Session info: chrome=126.0.6478.126)\nScreenshot: file://C:\\Users\\m.kamaltdinova\\.selene\\screenshots\\1724101251111\\1724101251111.png\nPageSource: file://C:\\Users\\m.kamaltdinova\\.selene\\screenshots\\1724101251111\\1724101251111.html", "trace": "fn = <selene.core.wait.Command object at 0x000001D9DFD9F860>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selene\\core\\wait.py:61: in __call__\n    return self._fn(entity)\n.venv\\Lib\\site-packages\\selene\\core\\entity.py:525: in raw_click\n    element.locate().click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D9DFD9C260>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x558adc1cf810 \\\\u003Cunknown>\\\\n#18 0x558adc1dedac \\\\u003Cunknown>\\\\n#19 0x7f37303efac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=126.0.6478.126)\nE       Stacktrace:\nE       #0 0x558adc1dfc7a <unknown>\nE       #1 0x558adbec2c71 <unknown>\nE       #2 0x558adbf107ef <unknown>\nE       #3 0x558adbf0415f <unknown>\nE       #4 0x558adbf325c2 <unknown>\nE       #5 0x558adbf03ad9 <unknown>\nE       #6 0x558adbf3278e <unknown>\nE       #7 0x558adbf51303 <unknown>\nE       #8 0x558adbf32363 <unknown>\nE       #9 0x558adbf02247 <unknown>\nE       #10 0x558adbf02b9e <unknown>\nE       #11 0x558adc1a624b <unknown>\nE       #12 0x558adc1aa2f1 <unknown>\nE       #13 0x558adc191afe <unknown>\nE       #14 0x558adc1aae52 <unknown>\nE       #15 0x558adc17679f <unknown>\nE       #16 0x558adc1cf638 <unknown>\nE       #17 0x558adc1cf810 <unknown>\nE       #18 0x558adc1dedac <unknown>\nE       #19 0x7f37303efac3 <unknown>\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_add_item_to_cart():\n        home.open_page()\n        home.search_item('144132398')\n        catalog.validate_text('144132398')\n>       cart.product_add_to_cart()\n\ntests\\test_product.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nwb_ui_test_project\\models\\pages\\cart_page.py:9: in product_add_to_cart\n    browser.element('.product-page__order-buttons [aria-label=\"Добавить в корзину\"]').click()\n.venv\\Lib\\site-packages\\selene\\core\\entity.py:540: in click\n    self.wait.for_(\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x000001D9DFD9F860>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 20s, while waiting for:\nE                   browser.element(('css selector', '.product-page__order-buttons [aria-label=\"Добавить в корзину\"]')).click\nE                   \nE                   Reason: ElementNotInteractableException: element not interactable\nE                     (Session info: chrome=126.0.6478.126)\nE                   Screenshot: file://C:\\Users\\m.kamaltdinova\\.selene\\screenshots\\1724101251111\\1724101251111.png\nE                   PageSource: file://C:\\Users\\m.kamaltdinova\\.selene\\screenshots\\1724101251111\\1724101251111.html\n\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:148: TimeoutException"}, "steps": [{"name": "Открыть домашнюю страницу", "status": "passed", "start": 1724101335745, "stop": 1724101338173}, {"name": "Выбор продукта", "status": "passed", "start": 1724101338173, "stop": 1724101339970}, {"name": "Проверка товара по результату поиска", "status": "passed", "start": 1724101339970, "stop": 1724101341022}, {"name": "Добавление продукта в корзину", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 20s, while waiting for:\nbrowser.element(('css selector', '.product-page__order-buttons [aria-label=\"Добавить в корзину\"]')).click\n\nReason: ElementNotInteractableException: element not interactable\n  (Session info: chrome=126.0.6478.126)\nScreenshot: file://C:\\Users\\m.kamaltdinova\\.selene\\screenshots\\1724101251111\\1724101251111.png\nPageSource: file://C:\\Users\\m.kamaltdinova\\.selene\\screenshots\\1724101251111\\1724101251111.html\n\n", "trace": "  File \"C:\\Users\\m.kamaltdinova\\PycharmProjects\\hw_14_July_Project_last\\wb_ui_test_project\\models\\pages\\cart_page.py\", line 9, in product_add_to_cart\n    browser.element('.product-page__order-buttons [aria-label=\"Добавить в корзину\"]').click()\n  File \"C:\\Users\\m.kamaltdinova\\PycharmProjects\\hw_14_July_Project_last\\.venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 540, in click\n    self.wait.for_(\n  File \"C:\\Users\\m.kamaltdinova\\PycharmProjects\\hw_14_July_Project_last\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\m.kamaltdinova\\PycharmProjects\\hw_14_July_Project_last\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1724101341022, "stop": 1724101361691}], "start": 1724101335745, "stop": 1724101361697, "uuid": "71dedb17-cd06-473a-a377-9931c11afb1a", "historyId": "8e782d6dcf04a179d4bf1e44b9c27af9", "testCaseId": "8e782d6dcf04a179d4bf1e44b9c27af9", "fullName": "tests.test_product#test_add_item_to_cart", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_product"}, {"name": "host", "value": "NB-CLOVER-090"}, {"name": "thread", "value": "13264-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_product"}]}